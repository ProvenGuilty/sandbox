version: "3"

tasks:
  prepare:
    run: once
    summary: |
      Prepare the virtualbmc server.
    vars:
      VBMC_CONTAINER_IMAGE:
        sh: yq eval '.virtualBMC.image' {{.STATE_FILE_FQ_PATH}}
      USERNAME:
        sh: yq eval '.virtualBMC.user' {{.STATE_FILE_FQ_PATH}}
      PASSWORD:
        sh: yq eval '.virtualBMC.pass' {{.STATE_FILE_FQ_PATH}}
    cmds:
      - docker run -it --rm --entrypoint htpasswd {{.VBMC_CONTAINER_IMAGE}} -nbB "{{.USERNAME}}" "{{.PASSWORD}}" > {{.CURR_DIR}}/scripts/htpasswd
      - docker run -it --rm --entrypoint openssl -v {{.CURR_DIR}}/scripts:/scripts {{.VBMC_CONTAINER_IMAGE}} req -x509 -newkey rsa:2048 -keyout /scripts/sushy.key -out /scripts/sushy.cert -days 365 -nodes -subj "/C=US/ST=CA/L=Los Angeles/O=Engineering/OU=Engineering/CN=tinkerbell.org"
    status:
      - test -f {{.CURR_DIR}}/scripts/htpasswd
      - test -f {{.CURR_DIR}}/scripts/sushy.key
      - test -f {{.CURR_DIR}}/scripts/sushy.cert

  start-server:
    run: once
    deps: [prepare]
    summary: |
      Start the virtualbmc server. Requires the "kind" docker network to exist.
    vars:
      VBMC_CONTAINER_NAME:
        sh: yq eval '.virtualBMC.containerName' {{.STATE_FILE_FQ_PATH}}
      VBMC_CONTAINER_IMAGE:
        sh: yq eval '.virtualBMC.image' {{.STATE_FILE_FQ_PATH}}
    cmds:
      - docker run -d --privileged --rm --network kind -e SUSHY_EMULATOR_CONFIG=/etc/sushy/sushy-emulator.conf -v /var/run/libvirt:/var/run/libvirt -v "${PWD}/scripts/sushy.key:/etc/sushy/sushy.key" -v "${PWD}/scripts/sushy.cert:/etc/sushy/sushy.cert" -v "${PWD}/scripts/sushy-tools.conf:/etc/sushy/sushy-emulator.conf" -v "${PWD}/scripts/htpasswd:/etc/sushy/htpasswd" --name {{.VBMC_CONTAINER_NAME}} {{.VBMC_CONTAINER_IMAGE}}
    status:
      - docker ps | grep -q {{.VBMC_CONTAINER_NAME}}

  start-vbmcs:
    run: once
    deps: [start-server]
    summary: |
      Register and start the virtualbmc servers. Requires that the virtual machines exist.
    vars:
      VBMC_NAME:
        sh: yq e '.virtualBMC.containerName' {{.STATE_FILE_FQ_PATH}}
    cmds:
      - ./scripts/virtualbmc.sh {{.STATE_FILE_FQ_PATH}}
    status:
      - expected=$(yq e '.totalNodes' {{.STATE_FILE_FQ_PATH}}); got=$(docker exec {{.VBMC_NAME}} vbmc list | grep -c "running" || :); [[ "$got" == "$expected" ]]

  update-state:
    run: once
    deps: [start-server]
    summary: |
      Update the state file with the virtual bmc server information.
    vars:
      VBMC_CONTAINER_NAME:
        sh: yq eval '.virtualBMC.containerName' {{.STATE_FILE_FQ_PATH}}
    cmds:
      - vbmc_ip=$(docker inspect -f '{{`{{ .NetworkSettings.Networks.kind.IPAddress }}`}}' {{.VBMC_CONTAINER_NAME}}); yq e -i '.virtualBMC.ip = "'$vbmc_ip'"' {{.STATE_FILE_FQ_PATH}}
    status:
      - vbmc_ip=$(docker inspect -f '{{`{{ .NetworkSettings.Networks.kind.IPAddress }}`}}' {{.VBMC_CONTAINER_NAME}}); [[ "$(yq eval '.virtualBMC.ip' {{.STATE_FILE_FQ_PATH}})" == "$vbmc_ip" ]]
